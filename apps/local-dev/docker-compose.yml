services:
  postgres:
    image: postgres:18-alpine
    container_name: postgres
    environment:
      POSTGRES_DB: app
      POSTGRES_USER: app
      POSTGRES_PASSWORD: app
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U app -d app || exit 1"]
      interval: 10s
      timeout: 3s
      retries: 5

  valkey:
    image: valkey/valkey:9-alpine
    container_name: valkey
    command: ["valkey-server", "--appendonly", "yes"]
    volumes:
      - valkey-data:/data
    networks:
      - backend
    healthcheck:
      test: ["CMD", "valkey-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  api:
    build:
      context: .
    image: fapi-fastify:latest
    environment:
      NODE_ENV: production
      PORT: 3000
      DATABASE_URL: postgresql://app:app@postgres:5432/app
      VALKEY_HOST: valkey
      VALKEY_PORT: 6379
    depends_on:
      postgres:
        condition: service_healthy
      valkey:
        condition: service_healthy
    networks:
      - backend
    expose:
      - "3000"
    deploy:
      replicas: 3
      restart_policy:
        condition: any
      update_config:
        order: start-first
      endpoint_mode: dnsrr

  haproxy:
    image: haproxy:3.2-alpine
    container_name: haproxy
    volumes:
      - ./haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
    ports:
      - "80:80"
    depends_on:
      - api
    networks:
      - frontend
      - backend

networks:
  frontend:
  backend:

volumes:
  postgres-data:
  valkey-data:
